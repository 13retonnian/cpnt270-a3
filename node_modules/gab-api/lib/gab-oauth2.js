// gab-oauth2.js
// Copyright (C) 2018,2021 Gab AI, Inc.
// License: MIT

'use strict';

const { ClientCredentials, AuthorizationCode } = require('hydra-simple-oauth2');

module.exports = (options) => {

  const oauth2config = {
    client: {
      id: options.clientId,
      secret: options.clientSecret,
    },
    auth: {
      tokenHost: `https://${options.apiHost}`,
    },
  };

  var authorizationCode = new AuthorizationCode(oauth2config);

  async function authorize (req, res, next) {
    /*
      * If being called with a ?code parameter, generate the OAUTH2 token using
      * the code.
      */
    if (req.query.code) {
      var tokenConfig = {
        code: req.query.code,
        redirect_uri: options.authorizeUri,
        scope: options.scopes,
        state: req.query.state
      };
      const accessToken = await authorizationCode.getToken(tokenConfig);
      await options.saveUserAccessToken(req, accessToken);
      return res.redirect(req.session.redirectUri || options.redirectUri);
    }

    /*
     * If being called with an ?error parameter, report the error and abort
     * further processing.
     */
    if (req.query.error) {
      return next(new Error(req.query.message));
    }

    /*
     * Start the user authorization procedure. This should call back to this
     * same URL with either a ?code parameter or an ?error parameter.
     */
    var authOptions = {
      redirect_uri: options.authorizeUri,
      scope: options.scopes
    };
    if (req.query && req.query.state) {
      authOptions.state = req.query.state;
    }
    const authorizationUri = authorizationCode.authorizeURL(authOptions);
    return res.redirect(authorizationUri);
  }

  async function verifyAccessToken (accessToken) {
    if (!accessToken.expired()) {
      return accessToken;
    }
    return accessToken.refresh();
  }

  async function getClientToken ( ) {
    const client = new ClientCredentials(oauth2config);
    const tokenParams = {
      scope: options.scopes,
    };
    const accessToken = await client.getToken(tokenParams);
    return accessToken;
  }

  return {
    authorize: authorize,
    getClientToken: getClientToken,
    createAccessToken: (accessToken) => {
      return authorizationCode.createToken(accessToken);
    },
    verifyAccessToken: verifyAccessToken
  };
};
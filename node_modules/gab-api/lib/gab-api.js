// gab-api.js
// Copyright (C) 2018,2021 Gab AI, Inc.
// License: MIT

'use strict';

const crypto = require('crypto');
const fetch = require('node-fetch'); // jshint ignore:line
class GabApiClient {

  constructor (config, oauth2, accessToken, hmacKey) {
    this.config = config;
    this.oauth2 = oauth2;

    this.hmacKey = hmacKey;
    this.accessToken = oauth2.createAccessToken(accessToken);
  }

  async getApiHmacSaltKey ( ) {
    const requestUrl = `https://${this.config.apiHost}/api/v1/hmac_tokens`;
    const requestAuthenticationArtifact = crypto.randomBytes(64).toString('hex');

    const hmac = crypto.createHmac('sha256', this.config.clientSecret);
    hmac.update(requestAuthenticationArtifact);

    const hmacDigest = hmac.digest('hex');
    const headers = {
      'Content-Type': 'application/json;charset=utf-8',
      'Accept': 'application/json',
      'Authorization': `${this.accessToken.token.token_type} ${this.accessToken.token.access_token}`,
      'X-Gab-Token-Hmac': hmacDigest,
    };

    const body = JSON.stringify({ requestAuthenticationArtifact });
    const response = await fetch(requestUrl, { method: 'POST', headers, body });
    if (!response.ok) {
      throw new Error(`API request failed: ${response.statusText}`);
    }
    return response.json();
  }

  async getLoggedInUserDetails (options) {
    return this.buildRequest('/v1/accounts/verify_credentials', options);
  }

  async getUserDetails (username, options) {
    return this.buildRequest(`/v1/account_by_username/${username}`, options);
  }

  async createPost (body, options) {
    options = Object.assign({
      method: 'POST',
      body,
    }, options);
    return this.buildRequest(`/v1/statuses`, options);
  }

  async buildRequest (requestUri, options) {
    const { URL } = require('url');

    options = Object.assign({
      method: 'GET',
    }, options);
    const { method, body, formData } = options;

    const requestUrl = `https://${this.config.apiHost}/api${requestUri}`;
    this.accessToken = await this.oauth2.verifyAccessToken(this.accessToken);

    const url = new URL(requestUrl);
    const hmac = crypto.createHmac('sha256', options.hmacKey);
    hmac.update(url.pathname);
    if (url.search && url.search.length) {
      hmac.update(url.search);
    }
    if (body && body.length) {
      hmac.update(body);
    }
    const hmacDigest = hmac.digest('hex');
    const headers = {
      'Content-Type': 'application/json;charset=utf-8',
      'Accept': 'application/json',
      'Authorization': `${this.accessToken.token.token_type} ${this.accessToken.token.access_token}`,
      'X-Gab-Hmac': hmacDigest,
    };
    if (body && body.length) {
      headers['Content-Length'] = body.length;
    }
    const response = await fetch(requestUrl, { method, headers, body, formData, });
    if (!response.ok) {
      const error = new Error(`API request failed: ${response.statusText}`);
      error.statusCode = response.status || 500;
      try {
        error.body = await response.text();
      } catch (error) {
        // fall through
      }
      throw error;
    }
    const json = await response.json();
    return json;
  }
}

module.exports = (config, oauth2, accessToken) => {
  return new GabApiClient(config, oauth2, accessToken);
};